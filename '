#+title: Liams Emacs Config
#+PROPERTY: header-args :tangle ~/.config/doom/config.el
#+latex_class: report
#+options: coverpage:yes
#+startup: fold
#+property: header-args:emacs-lisp
#+property: header-args:elisp :results replace :exports code
#+options: coverpage:yes
#+startup: fold

huuuuge shoutout to this gangster, I basically nabbed like 95 percent of my config from him, after using a shitty hand written one for like 3 weeks with a 30 second load time

* TODO Emacs config
TODO: Fix the following
1. LSP Broken
2. Figure out how to properly set up dictionary
3. Org mode load times absurdly long
   a. The code blocks / stuff I configured for org modern, and the org bigger headlines aren't at all working, likely something in my cfg BEFORE that is breaking it
   b. Furthermore, look into why the Latex fragments aren't correctly rendering the trees (as seen in the)[[org:roam/20240324021855-predicate_logic_as_a_formal_language.org][ Predicate Logic]] notes
   c. lsp in org src blocks still non-existent
   d. Doom modeline not working
4. Configure the symbols that you want to use properly
5. Set up ORG-TOC, or find some sort of outline view that I can use to jump around headings of a larger org file like this
6. fix the minimap, cause it looks like ass and has linespacing that is wayyyy too large
7. See if I can rebind the stuff that is under ctrl-h, ctrl-j, c-k, and c-l to be more like my vim config, where those keybinds move you to the different views you have open if your window is split




[[https://tecosaur.github.io/emacs-config/config.html][Doom Emacs Configuration]]

another helpful config I found recently:
[[https://hieuphay.com/doom-emacs-config/][another one]]


* Config Boilerplate
** Telling Emacs who I am (they are in my skin)
#+BEGIN_SRC emacs-lisp :tangle yes
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
 (setq user-full-name "Liam Wirth"
       user-mail-address "ltwirth@asu.edu")


;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
;; I've been on-and off trying to use the org agenda, and i like the ideas of org-roam-daily as a way to quickly make/maintain daily notes.
;; I thought to myself "why not try to combine the two?"
(setq org-agenda-files '("~/org/roam/daily/"))
#+END_SRC

#+RESULTS:
| ~/org/roam/daily/ |

** Leftover block from the original config.el file, has some helpful reminders so I'll keep it
#+BEGIN_SRC emacs-lisp
;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+END_SRC

#+RESULTS:
* Default Variables and misc
*** Cache and such?
#+begin_src emacs-lisp
(unless (file-exists-p (expand-file-name "persp" doom-cache-dir))
  (make-directory (expand-file-name "persp/" doom-cache-dir) t))
(defun my/persp-save-session-with-name (name)
  "save the current session with a specified NAME."
  (interactive "sEnter session name: ")
  (persp-save-state-to-file (concat persp-save-dir name)))



(after! persp-mode)
  ;;by default persp save dir is .config/emacs/.local/etc/workspaces I'm chill w/ that


#+end_src
*** Not sure where to categorize these
#+begin_src emacs-lisp
#+end_src

#+RESULTS:
: 1

#+RESULTS:
: 1

*** Epic Sauce Defaults
#+begin_src emacs-lisp
(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "…"                ; Unicode ellispis are nicer than "...", and also save /precious/ space
      password-cache-expiry nil                   ; I can trust my computers ... can't I?
      scroll-preserve-screen-position 'always     ; Don't have `point' jump around
      scroll-margin 2                             ; It's nice to maintain a little margin
      display-time-default-load-average nil)      ; I don't think I've ever found this useful

(display-time-mode 1)                             ; Enable time in the mode-line
(global-subword-mode 1)                           ; Iterate through CamelCase words
(pixel-scroll-precision-mode t)                   ; Turn on pixel scrolling


(setq-default abbrev-mode t)

(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t                               ; Stretch cursor to the glyph width
 show-paren-mode 1                                ; Highlight Matching Parenthesis
 abbrev-mode t                                    ; erm..
)
#+end_src

#+RESULTS:
: t

*** Adding things to list?
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(height . 24))
(add-to-list 'default-frame-alist '(width . 80))
#+end_src

#+RESULTS:
: ((buffer-predicate . doom-buffer-frame-predicate) (right-divider-width . 1) (bottom-divider-width . 1) (font . JetBrains Mono-15) (width . 80) (height . 24) (vertical-scroll-bars) (tool-bar-lines . 0) (menu-bar-lines . 0) (left-fringe . 8) (right-fringe . 8))

*** Setting up the custom-file (to be used sparingly)
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

#+RESULTS:
: t

** Evil Mode Window Management
*** Default splitting direction
if you for some unholy reason want to split the window to the left, or above when there's only one window open,
you're a psychopath
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

#+RESULTS:
: t

**** Prompting for which buffer to open
just a nice little QOL thing
#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

#+RESULTS:

*** Window Rotation
good ol keybinds and such
#+begin_src emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"     #'evil-window-left
      "<down>"     #'evil-window-down
      "<up>"       #'evil-window-up
      "<right>"    #'evil-window-right
      ;; Swapping windows
      "C-<left>"       #'+evil/window-move-left
      "C-<down>"       #'+evil/window-move-down
      "C-<up>"         #'+evil/window-move-up
      "C-<right>"      #'+evil/window-move-right)

(setq evil-vsplit-window-right t
      evil-split-window-below t)
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

#+RESULTS:

** Hippie Expand stuff
#+begin_src emacs-lisp
(global-set-key [remap dabbrev-expand] #'hippie-expand)
(setq hippie-expand-try-functions-list
      '(try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-list
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-expand-line
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))
#+end_src
* Looks
I intend to configure the overal look and feel of my emacs configuration here, as well as any packages/modules that would affect how it looks and feels
I.E
+ [[Centaur Tabs]]

To See stuff responsible for org mode look and feel, see:
+ [[Org Look and Feel]]

** Font!
#+begin_src emacs-lisp
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face

(set-face-attribute 'default nil
                    :font "JetBrains Mono NerdFont"
                    :height 140
                    :weight 'medium)
(set-face-attribute 'variable-pitch nil
                    :font "Overpass"
                    :height 120
                    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                    :font "JetBrains Mono"
                    :height 120
                    :weight 'medium);; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
                    :slant 'italic)
;;(set-face-attribute 'font-lock-keyword-face nil
;; :slant 'italic)
(set-face-attribute 'doom-serif-font (font-spec :family "IBM Plex Mono" :size 22 :weight 'light))
(set-face-attribute 'doom-symbol-font (font-spec :family "JuliaMono"))
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-15"))

(setq-default line-spacing 0.05)
#+end_src

#+RESULTS:
: 0.05

#+begin_src emacs-lisp

#+end_src
** Theme!
#+begin_src emacs-lisp
(setq doom-theme 'doom-gruvbox)
(setq display-line-numbers-type 'relative)
#+end_src

#+RESULTS:
: relative

** +Action+! Variables relevant to look and feel!
#+begin_src emacs-lisp
(blink-cursor-mode -1)
(column-number-mode t)
(transient-mark-mode t)
#+end_src

#+RESULTS:
: t

** Doom Modeline
#+begin_src emacs-lisp
(after! doom-modeline
  (setq doom-modeline-enable-word-count t)
  (setq doom-modeline-icon t)
  (setq doom-modeline-height 45)
  (setq doom-modeline-lsp-icon t)
  (setq doom-modeline-total-line-number t)
  (setq doom-modeline-lsp t)
  (setq doom-modeline-modal-icon t)
  (setq doom-modeline-modal-modern-icon t)
  (setq doom-modeline-battery t)
  (setq doom-modeline-time t)
  (setq doom-modeline-env-version t)
  (setq doom-modeline-time-clock-size 0.65)
  ;;(setq      doom-modeline-hud nil)
  (setq      doom-themes-padded-modeline t)
  (add-hook! 'doom-modeline-mode-hook
    (progn
      (set-face-attribute 'header-line nil
                          :background (face-background 'mode-line)
                          :foreground (face-foreground 'mode-line))
      ))
  )
#+end_src

#+RESULTS:

** Startup Screen
this one is gonna be pretty long to configure, but it's largely cause I've lifted a hefty chunk of code that will add silly/stupid splash phrases to the startup screen
*** Splash-Phrase Tomfoolery
**** Setting Up The Source Folder
#+begin_src emacs-lisp
(defvar splash-phrase-source-folder
  (expand-file-name "misc/splash-phrases" doom-private-dir)
  "A folder of text files with a fun phrase on each line.")
#+end_src
**** Actually getting the splash-phrases from the source folder
#+begin_src emacs-lisp
(defvar splash-phrase-sources
  (let* ((files (directory-files splash-phrase-source-folder nil "\\.txt\\'"))
         (sets (delete-dups (mapcar
                             (lambda (file)
                               (replace-regexp-in-string "\\(?:-[0-9]+-\\w+\\)?\\.txt" "" file))
                             files))))
    (mapcar (lambda (sset)
              (cons sset
                    (delq nil (mapcar
                               (lambda (file)
                                 (when (string-match-p (regexp-quote sset) file)
                                   file))
                               files))))
            sets))
  "A list of cons giving the phrase set name, and a list of files which contain phrase components.")

#+end_src

**** No Caching Here
**** Some Functions
#+begin_src emacs-lisp
(defvar splash-phrase--cached-lines nil)
#+end_src
***** Randomly choosing the Splash Phrase
(and making some custom variable hold that value)
#+begin_src emacs-lisp
(defvar splash-phrase-set
  (nth (random (length splash-phrase-sources)) (mapcar #'car splash-phrase-sources))
  "The default phrase set. See `splash-phrase-sources'.")
#+end_src
*****  Picking A Set From The Folder
#+begin_src emacs-lisp
(defun splash-phrase-set-random-set ()
  "Set a new random splash phrase set."
  (interactive)
  (setq splash-phrase-set
        (nth (random (1- (length splash-phrase-sources)))
             (cl-set-difference (mapcar #'car splash-phrase-sources) (list splash-phrase-set))))
  (+doom-dashboard-reload t))
#+end_src
or allowing the user to choose one explicitly:
#+begin_src emacs-lisp
(defun splash-phrase-select-set ()
  "Select a specific splash phrase set."
  (interactive)
  (setq splash-phrase-set (completing-read "Phrase set: " (mapcar #'car splash-phrase-sources)))
  (+doom-dashboard-reload t))
#+end_src
***** Getting One From A File
#+begin_src emacs-lisp
(defun splash-phrase-get-from-file (file)
  "Fetch a random line from FILE."
  (let ((lines (or (cdr (assoc file splash-phrase--cached-lines))
                   (cdar (push (cons file
                                     (with-temp-buffer
                                       (insert-file-contents (expand-file-name file splash-phrase-source-folder))
                                       (split-string (string-trim (buffer-string)) "\n")))
                               splash-phrase--cached-lines)))))
    (nth (random (length lines)) lines)))

#+end_src

***** Getting The Phrase
#+begin_src emacs-lisp
(defun splash-phrase (&optional set)
  "Construct a splash phrase from SET. See `splash-phrase-sources'."
  (mapconcat
   #'splash-phrase-get-from-file
   (cdr (assoc (or set splash-phrase-set) splash-phrase-sources))
   " "))
#+end_src
**** Making it all Look Pretty
#+begin_src emacs-lisp
(defun splash-phrase-dashboard-formatted ()
  "Get a splash phrase, flow it over multiple lines as needed, and fontify it."
  (mapconcat
   (lambda (line)
     (+doom-dashboard--center
      +doom-dashboard--width
      (with-temp-buffer
        (insert-text-button
         line
         'action
         (lambda (_) (+doom-dashboard-reload t))
         'face 'doom-dashboard-menu-title
         'mouse-face 'doom-dashboard-menu-title
         'help-echo "Random phrase"
         'follow-link t)
        (buffer-string))))
   (split-string
    (with-temp-buffer
      (insert (splash-phrase))
      (setq fill-column (min 70 (/ (* 2 (window-width)) 3)))
      (fill-region (point-min) (point-max))
      (buffer-string))
    "\n")
   "\n"))
#+end_src
**** Inserting the (now beautified) Splash Phrase into the Dashboard
#+begin_src emacs-lisp
(defun splash-phrase-dashboard-insert ()
  "Insert the splash phrase surrounded by newlines."
  (insert "\n" (splash-phrase-dashboard-formatted) "\n"))
#+end_src
*** TODO Configuring the Dashboard
uhhh.... uhhhhmmmmm
** Centaur Tabs
I still have little to no clue how emacs window management works
#+begin_src emacs-lisp
(after! centaur-tabs

  (setq centaur-tabs-height 36
        centaur-tabs-set-icons t
        centaur-tabs-modified-marker "o"
        centaur-tabs-close-button "×"
        centaur-tabs-set-bar 'above
        centaur-tabs-gray-out-icons 'buffer)
  )
#+end_src

#+RESULTS:
: buffer

** Info-Colors
#+begin_src emacs-lisp
(use-package! info-colors
:commands (info-colors-fontify-node))
#+end_src

#+RESULTS:

* Configuring Plugins (Misc)
** Which-Key
it's like the one from neovim? (or is it the other way around?)
#+begin_src emacs-lisp
(after! which-key
  (setq which-key-idle-delay 0.2))

(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
(setq which-key-allow-multiple-replacements t)
#+end_src

#+RESULTS:
: t

** KeyCast
neat little plugin I might never use, but cool to have
#+begin_src emacs-lisp
;; (use-package keycast
;;   :commands keycast-mode
;;   :config
;;   (define-minor-mode keycast-mode
;;     "Show current command and its key binding in the mode line."
;;     :global t
;;     (if keycast-mode
;;         (progn
;;           (add-hook 'pre-command-hook 'keycast--update t)
;;           (add-to-list 'global-mode-string '("" mode-line-keycast " ")))
;;       (remove-hook 'pre-command-hook 'keycast--update)
;;       (setq global-mode-string (remove '("" mode-line-keycast " ") global-mode-string))))
;;   (custom-set-faces!
;;     '(keycast-command :inherit doom-modeline-debug
;;       :height 0.9)
;;     '(keycast-key :inherit custom-modified
;;       :height 1.1
;;       :weight bold)))
#+end_src
** TODO Elcord
everyone MUST KNOW I'M USING EMACS (as well as vim)
#+begin_src emacs-lisp
(use-package! elcord
  :commands elcord-mode
  :config
  (setq elcord-use-major-mode-as-main-icon t))
#+end_src

#+RESULTS:

** CalcTeX
this is broken FIXME:
#+begin_src emacs-lisp
;; (use-package! calctex
;;   :commands calctex-mode
;;   :init
;;   (add-hook 'calc-mode-hook #'calctex-mode)
;;   :config
;; )
#+end_src

#+RESULTS:
| calctex-mode |

*** TODO KeyBinds?
#+begin_src emacs-lisp
;;(use-package! calctex
;;  :commands calctex-mode
;;  :init
;;  (add-hook 'calc-mode-hook #'calctex-mode)
;;  :config
;;  (setq calctex-additional-latex-packages "
;;\\usepackage[usenames]{xcolor}
;;\\usepackage{soul}
;;\\usepackage{adjustbox}
;;\\usepackage{amsmath}
;;\\usepackage{amssymb}
;;\\usepackage{siunitx}
;;\\usepackage{cancel}
;;\\usepackage{mathtools}
;;\\usepackage{mathalpha}
;;\\usepackage{xparse}
;;\\usepackage{arevmath}"
;;        calctex-additional-latex-macros
;;        (concat calctex-additional-latex-macros
;;                "\n\\let\\evalto\\Rightarrow"))
;;  (defadvice! no-messaging-a (orig-fn &rest args)
;;    :around #'calctex-default-dispatching-render-process
;;    (let ((inhibit-message t) message-log-max)
;;      (apply orig-fn args)))
;;  ;; Fix hardcoded dvichop path (whyyyyyyy)
;;  (let ((vendor-folder (concat (file-truename doom-local-dir)
;;                               "straight/"
;;                               (format "build-%s" emacs-version)
;;                               "/calctex/vendor/")))
;;    (setq calctex-dvichop-sty (concat vendor-folder "texd/dvichop")
;;          calctex-dvichop-bin (concat vendor-folder "texd/dvichop")))
;;  (unless (file-exists-p calctex-dvichop-bin)
;;    (message "CalcTeX: Building dvichop binary")
;;    (let ((default-directory (file-name-directory calctex-dvichop-bin)))
;;      (call-process "make" nil nil nil))))

(map! :map calc-mode-map
      :after calc
      :localleader
      :desc "Embedded calc (toggle)" "e" #'calc-embedded)
(map! :map org-mode-map
      :after org
      :localleader
      :desc "Embedded calc (toggle)" "E" #'calc-embedded)
(map! :map latex-mode-map
      :after latex
      :localleader
      :desc "Embedded calc (toggle)" "e" #'calc-embedded)
(defvar calc-embedded-trail-window nil)
(defvar calc-embedded-calculator-window nil)

#+end_src
** Mixed Pitch
*** Setting the Variable-Pitch Serrif Font
#+begin_src emacs-lisp
(defface variable-pitch-serif
    '((t (:family "serif")))
    "A variable-pitch face with serifs."
    :group 'basic-faces)

(defcustom variable-pitch-serif-font (font-spec :family "serif")
  "The font face used for `variable-pitch-serif'."
  :group 'basic-faces
  :type '(restricted-sexp :tag "font-spec" :match-alternatives (fontp))
  :set (lambda (symbol value)
         (set-face-attribute 'variable-pitch-serif nil :font value)
         (set-default-toplevel-value symbol value)))

#+end_src

#+RESULTS:
: variable-pitch-serif-font

(lifted straight from the tecosaur config)
#+begin_src emacs-lisp

;;(defvar mixed-pitch-modes '(org-mode LaTeX-mode markdown-mode gfm-mode Info-mode)
;;  "Modes that `mixed-pitch-mode' should be enabled in, but only after UI initialisation.")
;;(defun init-mixed-pitch-h ()
;;  "Hook `mixed-pitch-mode' into each mode in `mixed-pitch-modes'.
;;Also immediately enables `mixed-pitch-modes' if currently in one of the modes."
;;  (when (memq major-mode mixed-pitch-modes)
;;    (mixed-pitch-mode 1))
;;  (dolist (hook mixed-pitch-modes)
;;    (add-hook (intern (concat (symbol-name hook) "-hook")) #'mixed-pitch-mode)))
;;(add-hook 'doom-init-ui-hook #'init-mixed-pitch-h)
;;
;;(autoload #'mixed-pitch-serif-mode "mixed-pitch"
;;  "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch." t)
;;
;;(setq! variable-pitch-serif-font (font-spec :family "Alegreya" :size 27))
;;
;;(after! mixed-pitch
;;  (setq mixed-pitch-set-height t)
;;  (set-face-attribute 'variable-pitch-serif nil :font variable-pitch-serif-font)
;;  (defun mixed-pitch-serif-mode (&optional arg)
;;    "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch."
;;    (interactive)
;;    (let ((mixed-pitch-face 'variable-pitch-serif))
;;      (mixed-pitch-mode (or arg 'toggle)))))
;;
;;(set-char-table-range composition-function-table ?f '(["\\(?:ff?[fijlt]\\)" 0 font-shape-gstring]))
;;(set-char-table-range composition-function-table ?T '(["\\(?:Th\\)" 0 font-shape-gstring]))
#+end_src
#+RESULTS:
** Persp Mode
This is largely for session management


** WriteWroom
#+begin_src emacs-lisp
(defvar +zen-serif-p t
  "Whether to use a serifed font with `mixed-pitch-mode'.")
(defvar +zen-org-starhide t
  "The value `org-modern-hide-stars' is set to.")

(after! writeroom-mode
  (defvar-local +zen--original-org-indent-mode-p nil)
  (defvar-local +zen--original-mixed-pitch-mode-p nil)
  (defun +zen-enable-mixed-pitch-mode-h ()
    "Enable `mixed-pitch-mode' when in `+zen-mixed-pitch-modes'."
    (when (apply #'derived-mode-p +zen-mixed-pitch-modes)
      (if writeroom-mode
          (progn
            (setq +zen--original-mixed-pitch-mode-p mixed-pitch-mode)
            (funcall (if +zen-serif-p #'mixed-pitch-serif-mode #'mixed-pitch-mode) 1))
        (funcall #'mixed-pitch-mode (if +zen--original-mixed-pitch-mode-p 1 -1)))))
  (defun +zen-prose-org-h ()
    "Reformat the current Org buffer appearance for prose."
    (when (eq major-mode 'org-mode)
      (setq display-line-numbers nil
            visual-fill-column-width 60
            org-adapt-indentation nil)
      (when (featurep 'org-modern)
        (setq-local org-modern-star '("🙘" "🙙" "🙚" "🙛")
                    ;; org-modern-star '("🙐" "🙑" "🙒" "🙓" "🙔" "🙕" "🙖" "🙗")
                    org-modern-hide-stars +zen-org-starhide)
        (org-modern-mode -1)
        (org-modern-mode 1))
      (setq
       +zen--original-org-indent-mode-p org-indent-mode)
      (org-indent-mode -1)))
  (defun +zen-nonprose-org-h ()
    "Reverse the effect of `+zen-prose-org'."
    (when (eq major-mode 'org-mode)
      (when (bound-and-true-p org-modern-mode)
        (org-modern-mode -1)
        (org-modern-mode 1))
      (when +zen--original-org-indent-mode-p (org-indent-mode 1))))
  (pushnew! writeroom--local-variables
            'display-line-numbers
            'visual-fill-column-width
            'org-adapt-indentation
            'org-modern-mode
            'org-modern-star
            'org-modern-hide-stars)
  (add-hook 'writeroom-mode-enable-hook #'+zen-prose-org-h)
  (add-hook 'writeroom-mode-disable-hook #'+zen-nonprose-org-h))
#+end_src

#+RESULTS:

*** Something regarding calcs placement
#+begin_src emacs-lisp
(defadvice! calc-embedded-with-side-pannel (&rest _)
  :after #'calc-do-embedded
  (when calc-embedded-trail-window
    (ignore-errors
      (delete-window calc-embedded-trail-window))
    (setq calc-embedded-trail-window nil))
  (when calc-embedded-calculator-window
    (ignore-errors
      (delete-window calc-embedded-calculator-window))
    (setq calc-embedded-calculator-window nil))
  (when (and calc-embedded-info
             (> (* (window-width) (window-height)) 1200))
    (let ((main-window (selected-window))
          (vertical-p (> (window-width) 80)))
      (select-window
       (setq calc-embedded-trail-window
             (if vertical-p
                 (split-window-horizontally (- (max 30 (/ (window-width) 3))))
               (split-window-vertically (- (max 8 (/ (window-height) 4)))))))
      (switch-to-buffer "*Calc Trail*")
      (select-window
       (setq calc-embedded-calculator-window
             (if vertical-p
                 (split-window-vertically -6)
               (split-window-horizontally (- (/ (window-width) 2))))))
      (switch-to-buffer "*Calculator*")
      (select-window main-window))))

#+end_src
**

* Org
the swag
** Org Variables
#+begin_src emacs-lisp
(after! org
(setq org-fontify-quote-and-verse-blocks t)
(setq org-highlight-latex-and-related '(native script entities))
(setq org-agenda-files '("~/org/roam/dailies"))
(require 'org-src)
(add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t)))




(defadvice org-export-output-file-name (before org-add-export-dir activate)
  "Modifies org-export to place exported files in a different directory"
  (when (not pub-dir)
      (setq pub-dir "~/org/exported/")
      (when (not (file-directory-p pub-dir))
       (make-directory pub-dir))))
)
#+end_src



#+RESULTS:
: org-export-output-file-name

*** Hooks
#+begin_src emacs-lisp
(defun nicer-org ()
  (progn
  (+org-pretty-mode 1)
  (mixed-pitch-mode 1)
  (hl-line-mode -1)
  (display-line-numbers-mode -1)
    (org-modern-mode -1)
    (org-modern-mode 1)
  ; (olivetti-mode 1)
  ;(org-Num-mode 1)
  ;(org-superstar-mode -1)
  ; (org-indent-mode -1)
  ))
(add-hook! 'org-mode-hook  #'nicer-org)
#+end_src

#+RESULTS:

** Keybinds
*** TODO General
#+begin_src emacs-lisp
(map! :after org
      :map org-mode-map
      :localleader
      :desc "Org-Mark-Ring jump" "gj" #'org-mark-ring-goto
      )
(map! :after org
      :map org-mode-map
      :localleader
      :desc "Org-Mark-Ring Save" "gs" #'org-mark-ring-push)
#+end_src

#+RESULTS:

*** A silly little keybind idea
open up a custom little swag baby gangster type thing whenever I hit a keybind while in a src block to enter a temp buffer
#+begin_src emacs-lisp
(defun open-temp-buffer-src ()
"Open Temporary Buffer When Editing Src Blocks"
(interactive)
(org-edit-src-code)
)
#+end_src

#+RESULTS:
: open-temp-buffer-src



#+begin_src emacs-lisp
(map! :after org
      :map org-mode-map
      :localleader
      :desc "Org Set Property" "O" #'org-set-property)
(map! :after org
      :map org-mode-map
      :localleader
      :n "o" #'org-edit-src-code)
#+end_src
#+RESULTS:

** Org Look and Feel
*** Org Headers
we want them bigger than text
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
 '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))

(custom-set-faces!
  '(org-document-title :height 2.0))
#+end_src

#+RESULTS:
| doom--customize-themes-h-34 | doom--customize-themes-h-89 |

*** Text Prefixes?
#+begin_src emacs-lisp
(defadvice! +org-indent--reduced-text-prefixes ()
  :after #'org-indent--compute-prefixes
  (setq org-indent--text-line-prefixes
        (make-vector org-indent--deepest-level nil))
  (when (> org-indent-indentation-per-level 0)
    (dotimes (n org-indent--deepest-level)
      (aset org-indent--text-line-prefixes
            n
            (org-add-props
                (concat (make-string (* n (1- org-indent-indentation-per-level))
                                     ?\s)
                        (if (> n 0)
                            (char-to-string org-indent-boundary-char)
                          "\u200b"))
                nil 'face 'org-indent)))))
#+end_src

#+RESULTS:

*** Spell-Fu
#+begin_src emacs-lisp
(after! spell-fu
  (cl-pushnew 'org-modern-tag (alist-get 'org-mode +spell-excluded-faces-alist)))
#+end_src

#+RESULTS:

*** Org-Ellipsis
#+begin_src emacs-lisp
(setq org-ellipsis " ▾ "
      org-hide-leading-stars t
      org-priority-highest ?A
      org-priority-lowest ?E
      org-priority-faces
      '((?A . 'nerd-icons-red)
        (?B . 'nerd-icons-orange)
        (?C . 'nerd-icons-yellow)
        (?D . 'nerd-icons-green)
        (?E . 'nerd-icons-blue)))

(appendq! +ligatures-extra-symbols
          (list :list_property "∷"
                :em_dash       "—"
                :ellipses      "…"
                :arrow_right   "→"
                :arrow_left    "←"
                :arrow_lr      "↔"
                :properties    "⚙"
                :end           "∎"
                :priority_a    #("⚑" 0 1 (face nerd-icons-red))
                :priority_b    #("⬆" 0 1 (face nerd-icons-orange))
                :priority_c    #("■" 0 1 (face nerd-icons-yellow))
                :priority_d    #("⬇" 0 1 (face nerd-icons-green))
                :priority_e    #("❓" 0 1 (face nerd-icons-blue))))
#+end_src

#+RESULTS:
| :name | » | :src_block | » | :src_block_end | « | :quote | “ | :quote_end | ” | :lambda | λ  | :def | ƒ | :composition | ∘ | :map | ↦ | :null | ∅ | :true | 𝕋 | :false | 𝔽 | :int | ℤ | :float | ℝ | :str | 𝕊 | :bool | 𝔹 | :list | 𝕃 | :not | ￢ | :in | ∈ | :not-in | ∉ | :and | ∧ | :or | ∨ | :for | ∀ | :some | ∃ | :return | ⟼ | :yield | ⟻ | :union | ⋃ | :intersect | ∩ | :diff | ∖ | :tuple | ⨂ | :pipe |  | :dot | • | :list_property | ∷ | :em_dash | — | :ellipses | … | :arrow_right | → | :arrow_left | ← | :arrow_lr | ↔ | :properties | ⚙ | :end | ∎ | :priority_a | ⚑ | :priority_b | ⬆ | :priority_c | ■ | :priority_d | ⬇  | :priority_e | ❓ | :list_property | ∷ | :em_dash | — | :ellipses | … | :arrow_right | → | :arrow_left | ← | :arrow_lr | ↔ | :properties | ⚙ | :end | ∎ | :priority_a | ⚑ | :priority_b | ⬆  | :priority_c | ■ | :priority_d | ⬇  | :priority_e | ❓ |

*** TODO figure out what to call this header
#+begin_src emacs-lisp
(defadvice! +org-init-appearance-h--no-ligatures-a ()
  :after #'+org-init-appearance-h
  (set-ligatures! 'org-mode nil)
  (set-ligatures! 'org-mode
    :list_property "::"
    :em_dash       "---"
    :ellipsis      "..."
    :arrow_right   "->"
    :arrow_left    "<-"
    :arrow_lr      "<->"
    :properties    ":PROPERTIES:"
    :end           ":END:"
    :priority_a    "[#A]"
    :priority_b    "[#B]"
    :priority_c    "[#C]"
    :priority_d    "[#D]"
    :priority_e    "[#E]"))
#+end_src
** Behavior
*** Bullet Promotion & Demotion

#+begin_src emacs-lisp
(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+") ("1." . "a.")))
#+end_src

#+RESULTS:
: ((+ . -) (- . +) (* . +) (1. . a.))

*** Org-Appear
#+begin_src emacs-lisp
(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks nil)
  ;; for proper first-time setup, `org-appear--set-elements'
  ;; needs to be run after other hooks have acted.
  (run-at-time nil nil #'org-appear--set-elements))
(setq org-appear-mode t)
#+end_src

#+RESULTS:
: t

*** Org-Ol-Tree (broken I think)
#+begin_src emacs-lisp
(use-package org-ol-tree
  :commands org-ol-tree
  :config
  (setq org-ol-tree-ui-icon-set
        (if (and (display-graphic-p)
                 (fboundp 'all-the-icons-material))
            'all-the-icons
          'unicode))
  (org-ol-tree-ui--update-icon-set))
(map! :map org-mode-map
      :after org
      :localleader
      :desc "Outline" "O" #'org-ol-tree)
#+end_src

#+RESULTS:

** Babel
*** Default Header Args
#+begin_src emacs-lisp
(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "replace")
        (:exports . "code")
        (:cache . "no")
        (:noweb . "no")
        (:hlines . "no")
        (:tangle . "no")
        (:comments . "link")))

#+END_SRC

#+RESULTS:
: ((:session . none) (:results . replace) (:exports . code) (:cache . no) (:noweb . no) (:hlines . no) (:tangle . no) (:comments . link))

*** Load Languages:
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t)
   '(emacs-lisp . t)
   '(mips . t)
   '(latex . t)
   '(rust . t)
   '(c . t)
   '(cpp . t)))
#+end_src


*** LSP Org-Babel-Enable (Doesn't Work?)
trying something
#+begin_src emacs-lisp
;;(cl-defmacro lsp-org-babel-enable (lang)
;;  "Support LANG in org source code block."
;;  (setq centaur-lsp 'lsp-mode)
;;  (cl-check-type lang string)
;;  (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
;;         (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
;;    `(progn
;;       (defun ,intern-pre (info)
;;         (let ((file-name (->> info caddr (alist-get :file))))
;;           (unless file-name
;;             (setq file-name (make-temp-file "babel-lsp-")))
;;           (setq buffer-file-name file-name)
;;           (lsp-deferred)))
;;       (put ',intern-pre 'function-documentation
;;            (format "Enable lsp-mode in the buffer of org source block (%s)."
;;                    (upcase ,lang)))
;;       (if (fboundp ',edit-pre)
;;           (advice-add ',edit-pre :after ',intern-pre)
;;         (progn
;;           (defun ,edit-pre (info)
;;             (,intern-pre info))
;;           (put ',edit-pre 'function-documentation
;;                (format "Prepare local buffer environment for org source block (%s)."
;;                        (upcase ,lang))))))))
;;(defvar org-babel-lang-list
;;  '("go" "python" "ipython" "bash" "sh"))
;;(dolist (lang org-babel-lang-list)
;;  (eval `(lsp-org-babel-enable ,lang)))
#+end_src

#+RESULTS:


#+RESULTS:
| (closure (t) (&rest _) (progn (let ((tail '(after-change-major-mode-hook))) (while tail (let ((hook (car tail))) (let ((tail (list #'(lambda (&rest _) (if (derived-mode-p 'org-mode) (progn (setq tab-width 8))))))) (while tail (let ((func (car tail))) (add-hook hook func nil t) (setq tail (cdr tail))))) (setq tail (cdr tail)))))) (add-hook 'save-place-after-find-file-hook #'+org-make-last-point-visible-h nil t)) | lsp-deferred | nicer-org | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | er/add-org-mode-expansions | turn-on-org-cdlatex | (closure ((hook . org-mode-hook)) (&rest _) (progn (let ((tail '(after-change-major-mode-hook))) (while tail (let ((hook (car tail))) (let ((tail (list #'(lambda (&rest _) (if (derived-mode-p 'org-mode) (progn (setq tab-width 8))))))) (while tail (let ((func (car tail))) (add-hook hook func nil t) (setq tail (cdr tail))))) (setq tail (cdr tail)))))) (add-hook 'save-place-after-find-file-hook #'+org-make-last-point-visible-h nil t)) | +lookup--init-org-mode-handlers-h | (closure (t) (&rest _) (add-hook 'before-save-hook 'org-encrypt-entries nil t)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | org-appear-mode | org-modern-mode | doom-disable-show-paren-mode-h | doom-disable-show-trailing-whitespace-h | evil-org-mode | org-eldoc-load | toc-org-enable | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-cdlatex-mode | embrace-org-mode-hook | +literate-enable-recompile-h |

#+begin_src emacs-lisp
;;(cl-defmacro lsp-org-babel-enable (lang)
;;  "Support LANG in org source code block."
;;  (setq centaur-lsp 'lsp-mode)
;;  (cl-check-type lang string)
;;  (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
;;         (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
;;    `(progn
;;       (defun ,intern-pre (info)
;;         (let ((file-name (->> info caddr (alist-get :file))))
;;           (unless file-name
;;             (setq file-name (make-temp-file "babel-lsp-")))
;;           (setq buffer-file-name file-name)
;;           (lsp-deferred)))
;;       (put ',intern-pre 'function-documentation
;;            (format "Enable lsp-mode in the buffer of org source block (%s)."
;;                    (upcase ,lang)))
;;       (if (fboundp ',edit-pre)
;;           (advice-add ',edit-pre :after ',intern-pre)
;;         (progn
;;           (defun ,edit-pre (info)
;;             (,intern-pre info))
;;           (put ',edit-pre 'function-documentation
;;                (format "Prepare local buffer environment for org source block (%s)."
;;                        (upcase ,lang))))))))
;;(defvar org-babel-lang-list
;;  '("go" "python" "ipython" "bash" "sh" "rust" "emacs-lisp"))
;;(dolist (lang org-babel-lang-list)
;;  (eval `(lsp-org-babel-enable ,lang)))
#+end_src

#+RESULTS:

** Org-Latex
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
(defadvice! +org-edit-latex-env-after-insert-a (&rest _)
  :after #'org-cdlatex-environment-indent
  (org-edit-latex-environment))
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(native script entities))
(require 'org-src)
(add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t)))
(setq org-latex-preview-preamble
      (concat
       <<grab("latex-default-snippet-preamble")>>
       "\n% Custom font\n\\usepackage{arev}\n\n"
       ;<<grab("latex-maths-conveniences")>>))
       ))
#+end_src

#+RESULTS:
| latex | (:inherit default :extend t) |

Defining our font size:
#+begin_src emacs-lisp
;; Calibrated based on the TeX font and org-buffer font.
(plist-put org-format-latex-options :zoom 1.93)
(after! org (plist-put org-format-latex-options :scale 2.0))
#+end_src

#+RESULTS:
| :foreground | default | :background | default | :scale | 2.0 | :html-foreground | Black | :html-background | Transparent | :html-scale | 1.0 | :matchers | (begin $1 $ $$ \( \[) | :zoom | 1.93 |

** Org-Roam
#+begin_src emacs-lisp
(after! org
  (setq org-roam-directory  "~/org/roam/")
  (setq org-roam-completion-everywhere t))
#+end_src

#+RESULTS:
: t

*** TODO Modeline something something
#+begin_src emacs-lisp
(defadvice! doom-modeline--buffer-file-name-roam-aware-a (orig-fun)
  :around #'doom-modeline-buffer-file-name ; takes no args
  (if (s-contains-p org-roam-directory (or buffer-file-name ""))
      (replace-regexp-in-string
       "\\(?:^\\|.*/\\)\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)[0-9]*-"
       "🢔(\\1-\\2-\\3) "
       (subst-char-in-string ?_ ?  buffer-file-name))
    (funcall orig-fun)))
#+end_src

#+RESULTS:

*** Yasssss
I don't understand this plugin as much as I should tbh
****  Src-Header stuff
#+begin_src emacs-lisp
(defun +yas/org-src-header-p ()
  "Determine whether `point' is within a src-block header or header-args."
  (pcase (org-element-type (org-element-context))
    ('src-block (< (point) ; before code part of the src-block
                   (save-excursion (goto-char (org-element-property :begin (org-element-context)))
                                   (forward-line 1)
                                   (point))))
    ('inline-src-block (< (point) ; before code part of the inline-src-block
                          (save-excursion (goto-char (org-element-property :begin (org-element-context)))
                                          (search-forward "]{")
                                          (point))))
    ('keyword (string-match-p "^header-args" (org-element-property :value (org-element-context))))))

#+end_src

#+RESULTS:
: +yas/org-src-header-p

**** More Src-Header Stuff
#+begin_src emacs-lisp
(defun +yas/org-prompt-header-arg (arg question values)
  "Prompt the user to set ARG header property to one of VALUES with QUESTION.
The default value is identified and indicated. If either default is selected,
or no selection is made: nil is returned."
  (let* ((src-block-p (not (looking-back "^#\\+property:[ \t]+header-args:.*" (line-beginning-position))))
         (default
          (or
           (cdr (assoc arg
                       (if src-block-p
                           (nth 2 (org-babel-get-src-block-info t))
                         (org-babel-merge-params
                          org-babel-default-header-args
                          (let ((lang-headers
                                 (intern (concat "org-babel-default-header-args:"
                                                 (+yas/org-src-lang)))))
                            (when (boundp lang-headers) (eval lang-headers t)))))))
           ""))
         default-value)
    (setq values (mapcar
                  (lambda (value)
                    (if (string-match-p (regexp-quote value) default)
                        (setq default-value
                              (concat value " "
                                      (propertize "(default)" 'face 'font-lock-doc-face)))
                      value))
                  values))
    (let ((selection (consult--read values :prompt question :default default-value)))
      (unless (or (string-match-p "(default)$" selection)
                  (string= "" selection))
        selection))))
#+end_src
**** Yas Src Blocks
#+begin_src emacs-lisp
(defun +yas/org-src-lang ()
  "Try to find the current language of the src/header at `point'.
Return nil otherwise."
  (let ((context (org-element-context)))
    (pcase (org-element-type context)
      ('src-block (org-element-property :language context))
      ('inline-src-block (org-element-property :language context))
      ('keyword (when (string-match "^header-args:\\([^ ]+\\)" (org-element-property :value context))
                  (match-string 1 (org-element-property :value context)))))))
#+end_src

**** Last Lang Used
#+begin_src emacs-lisp
(defun +yas/org-last-src-lang ()
  "Return the language of the last src-block, if it exists."
  (save-excursion
    (beginning-of-line)
    (when (re-search-backward "^[ \t]*#\\+begin_src" nil t)
      (org-element-property :language (org-element-context)))))
#+end_src
**** Most Common Language
#+begin_src emacs-lisp
(defun +yas/org-most-common-no-property-lang ()
  "Find the lang with the most source blocks that has no global header-args, else nil."
  (let (src-langs header-langs)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "^[ \t]*#\\+begin_src" nil t)
        (push (+yas/org-src-lang) src-langs))
      (goto-char (point-min))
      (while (re-search-forward "^[ \t]*#\\+property: +header-args" nil t)
        (push (+yas/org-src-lang) header-langs)))

    (setq src-langs
          (mapcar #'car
                  ;; sort alist by frequency (desc.)
                  (sort
                   ;; generate alist with form (value . frequency)
                   (cl-loop for (n . m) in (seq-group-by #'identity src-langs)
                            collect (cons n (length m)))
                   (lambda (a b) (> (cdr a) (cdr b))))))

    (car (cl-set-difference src-langs header-langs :test #'string=))))

#+end_src
** TODO Org tree
#+begin_src emacs-lisp
(use-package! org-ol-tree
  :commands org-ol-tree
  :config
  (setq org-ol-tree-ui-icon-set
        (if (and (display-graphic-p)
                 (fboundp 'all-the-icons-material))
            'all-the-icons
          'unicode))
  (org-ol-tree-ui--update-icon-set))

(map! :map org-mode-map
      :after org
      :localleader
      :desc "Outline" "O" #'org-ol-tree)
#+end_src

#+RESULTS:

** Capture
** Exporting

*** Org Export Backends:
yanked this from my .custom thing cause I want it to setup here
#+begin_src emacs-lisp 
(after! org 
 (setq org-export-backends '(ascii beamer html icalendar latex man md odt))
 )
#+end_src

#+RESULTS:
| ascii | beamer | html | icalendar | latex | man | md | odt |

*** Latex
**** Compiling
smart emacs guy says latexmk + biber is better so uhh, whatever you say boss!
#+begin_src emacs-lisp
;; org-latex-compilers = ("pdflatex" "xelatex" "lualatex"), which are the possible values for %latex
(setq org-latex-pdf-process '("LC_ALL=en_US.UTF-8 latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f"))
#+end_src

#+RESULTS:
| LC_ALL=en_US.UTF-8 latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f |


****** Nicer Checkboxes
#+begin_src emacs-lisp
(defun +org-export-latex-fancy-item-checkboxes (text backend info)
  (when (org-export-derived-backend-p backend 'latex)
    (replace-regexp-in-string
     "\\\\item\\[{$\\\\\\(\\w+\\)$}\\]"
     (lambda (fullmatch)
       (concat "\\\\item[" (pcase (substring fullmatch 9 -3) ; content of capture group
                             ("square"   "\\\\checkboxUnchecked")
                             ("boxminus" "\\\\checkboxTransitive")
                             ("boxtimes" "\\\\checkboxChecked")
                             (_ (substring fullmatch 9 -3))) "]"))
     text)))

(add-to-list 'org-export-filter-item-functions
             '+org-export-latex-fancy-item-checkboxes)
#+end_src

#+RESULTS:
| +org-export-latex-fancy-item-checkboxes |

**** Better Table of Contents
#+begin_src emacs-lisp

(after! org
  (setq org-latex-custom-id '("\\usepackage{tocloft}"
                              "\\setlength{\\cftbeforesecskip}{1ex}"
                              "\\setlength{\\cftbeforesubsecskip}{0.5ex}"
                              "\\setlength{\\cftbeforesubsubsecskip}{0.5ex}")))
#+end_src

#+begin_src emacs-lisp
(after! org
(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
             '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
           "\\usepackage{tocloft}"
           "\\setlength{\\cftbeforesecsckip}{1ex}"
           "\\setlength{\\cftbeforesubsecskip{0.5ex}"
           "\\setlength{\\cftbeforesubsubsecskip}{0.5ex}"
           ("\\tableofcontents" . "\\tableofcontents\\thispagestyle{empty}\\vspace*{\\fill}\\clearpage")
           "\\newpage")
"\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{fixltx2e}
\\usepackage{graphicx}
\\usepackage{longtable}
\\usepackage{float}
\\usepackage{wrapfig}
\\usepackage{rotating}
\\usepackage[normalem]{ulem}
\\usepackage{amsmath}
\\usepackage{textcomp}
\\usepackage{marvosym}
\\usepackage{wasysym}
\\usepackage{amssymb}
\\usepackage{hyperref}
\\usepackage{mathpazo}
\\usepackage{color}
\\usepackage{enumerate}
\\definecolor{bg}{rgb}{0.95,0.95,0.95}
\\tolerance=1000
      [NO-DEFAULT-PACKAGES]
      [PACKAGES]
      [EXTRA]
\\linespread{1.1}
\\hypersetup{pdfborder=0 0 0}"

                )

    (setq org-latex-toc-command "\\tableofcontents\\newpage")
  )


#+end_src
#+RESULTS:
: \tableofcontents\newpage
#+begin_src emacs-lisp
(after! org
(setq org-latex-classes
      '(("report"
           "\\documentclass{report}"
           ("\\chapter{%s}" . "\\chapter*{%s}")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
           ;; Customize the position of the "Contents" title
           "\\usepackage{tocloft}"
           "\\setlength{\\cftbeforesecsckip}{1ex}"
           "\\setlength{\\cftbeforesubsecskip{0.5ex}"
           "\\setlength{\\cftbeforesubsubsecskip}{0.5ex}"
           ("\\tableofcontents" . "\\tableofcontents\\thispagestyle{empty}\\vspace*{\\fill}\\clearpage")))))

#+end_src

#+RESULTS:
| report | \documentclass{report} | (\chapter{%s} . \chapter*{%s}) | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) | (\paragraph{%s} . \paragraph*{%s}) | (\subparagraph{%s} . \subparagraph*{%s}) | \usepackage{tocloft} | \setlength{\cftbeforesecsckip}{1ex} | \setlength{\cftbeforesubsecskip{0.5ex} | \setlength{\cftbeforesubsubsecskip}{0.5ex} | (\tableofcontents . \tableofcontents\thispagestyle{empty}\vspace*{\fill}\clearpage) |

The =hyperref= setup needs to be handled separately however.
#+name: latex-fancy-hyperref
#+begin_src LaTeX
\providecolor{url}{HTML}{0077bb}
\providecolor{link}{HTML}{882255}
\providecolor{cite}{HTML}{999933}
\hypersetup{
  pdfauthor={%a},
  pdftitle={%t},
  pdfkeywords={%k},
  pdfsubject={%d},
  pdfcreator={%c},
  pdflang={%L},
  breaklinks=true,
  colorlinks=true,
  linkcolor=link,
  urlcolor=url,
  citecolor=cite
}
\urlstyle{same}
#+end_src
#+RESULTS:

** TODO Org-Modern
still need to fix this :/
the key to it looking *pretty*
#+begin_src emacs-lisp :tangle yes
(use-package! org-modern
  :ensure t
  :hook '(org . org-modern-mode)
  :config
  (setq org-modern-star '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.2
        org-modern-list '((43 . "➤")
                          (45 . "–")
                          (42 . "•"))
        org-modern-todo-faces
        '(("TODO" :inverse-video t :inherit org-todo)
          ("PROJ" :inverse-video t :inherit +org-todo-project)
          ("STRT" :inverse-video t :inherit +org-todo-active)
          ("[-]"  :inverse-video t :inherit +org-todo-active)
          ("HOLD" :inverse-video t :inherit +org-todo-onhold)
          ("WAIT" :inverse-video t :inherit +org-todo-onhold)
          ("[?]"  :inverse-video t :inherit +org-todo-onhold)
          ("KILL" :inverse-video t :inherit +org-todo-cancel)
          ("NO"   :inverse-video t :inherit +org-todo-cancel))
        org-modern-footnote
        (cons nil (cadr org-script-display))
        org-modern-block-fringe nil
        org-modern-block-name
        '((t . t)
          ("src" "»" "«")
          ("example" "»–" "–«")
          ("quote" "❝" "❞")
          ("export" "⏩" "⏪"))
        org-modern-progress nil
        org-modern-priority nil
        org-modern-horizontal-rule (make-string 36 ?─)
        org-modern-keyword
        '((t . t)
          ("title" . "𝙏")
          ("subtitle" . "𝙩")
          ("author" . "𝘼")
          ("email" . #("" 0 1 (display (raise -0.14))))
          ("date" . "𝘿")
          ("property" . "☸")
          ("options" . "⌥")
          ("startup" . "⏻")
          ("macro" . "𝓜")
          ("bind" . #("" 0 1 (display (raise -0.1))))
          ("bibliography" . "")
          ("print_bibliography" . #("" 0 1 (display (raise -0.1))))
          ("cite_export" . "⮭")
          ("print_glossary" . #("ᴬᶻ" 0 1 (display (raise -0.1))))
          ("glossary_sources" . #("" 0 1 (display (raise -0.14))))
          ("include" . "⇤")
          ("setupfile" . "⇚")
          ("html_head" . "🅷")
          ("html" . "🅗")
          ("latex_class" . "🄻")
          ("latex_class_options" . #("🄻" 1 2 (display (raise -0.14))))
          ("latex_header" . "🅻")
          ("latex_header_extra" . "🅻⁺")
          ("latex" . "🅛")
          ("beamer_theme" . "🄱")
          ("beamer_color_theme" . #("🄱" 1 2 (display (raise -0.12))))
          ("beamer_font_theme" . "🄱𝐀")
          ("beamer_header" . "🅱")
          ("beamer" . "🅑")
          ("attr_latex" . "🄛")
          ("attr_html" . "🄗")
          ("attr_org" . "⒪")
          ("call" . #("" 0 1 (display (raise -0.15))))
          ("name" . "⁍")
          ("header" . "›")
          ("caption" . "☰")
          ("results" . "🠶")))
  (custom-set-faces! '(org-modern-statistics :inherit org-checkbox-statistics-todo)))
  #+end_src

  #+RESULTS:
  | org-modern-mode |

*** Org-Modern hook
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-modern-mode 1)))
#+end_src

#+RESULTS:
| (lambda nil (org-modern-mode 1)) | turn-on-org-cdlatex | org-appear-mode | nicer-org | er/add-org-mode-expansions | (closure ((hook . org-mode-hook)) (&rest _) (progn (let ((tail '(after-change-major-mode-hook))) (while tail (let ((hook (car tail))) (let ((tail (list #'(lambda (&rest _) (if (derived-mode-p 'org-mode) (progn (setq tab-width 8))))))) (while tail (let ((func (car tail))) (add-hook hook func nil t) (setq tail (cdr tail))))) (setq tail (cdr tail)))))) (add-hook 'save-place-after-find-file-hook #'+org-make-last-point-visible-h nil t)) | +lookup--init-org-mode-handlers-h | (closure (t) (&rest _) (add-hook 'before-save-hook 'org-encrypt-entries nil t)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | doom-disable-show-paren-mode-h | doom-disable-show-trailing-whitespace-h | evil-org-mode | org-eldoc-load | toc-org-enable | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-cdlatex-mode | writegood-mode | embrace-org-mode-hook | +literate-enable-recompile-h |

** Org-Agenda and Dailies
*** Define My Daily Template:
**** TODO implement function that will link to last daily node
#+begin_src emacs-lisp
(defun insert-previous-daily-link ()
  "Insert link to the previous daily note, if available."
  (interactive)
  (let ((prev-note (org-roam-dailies-find-previous-note)))
    (when prev-note
      (insert (format "[[%s][Previous Daily Note]]\n" prev-note)))))
#+end_src


#+RESULTS:
: insert-previous-daily-link

search through roam/dailies directory \to find most recently created node (by date) and insert link to that node at the top of the created daily file

Also, fix this such that it actually works, cause I had to open my config and c-c-c-c this to make it work


#+begin_src emacs-lisp
(setq org-roam-dailies-capture-templates
          (let ((head
                 (concat "#+title: %<%Y-%m-%d (%A)>\n#+startup: showall\n#+filetags: Dailies\n* Daily Overview\n"
                         "#+begin_src emacs-lisp :results value raw\n"
                         "(as/get-daily-agenda \"%<%Y-%m-%d>\")\n"
                         "#+end_src\n"
                         "* [/] Do Today\n* [/] Maybe Do Today\n* Journal\n")))
            `(("j" "journal" entry
               "* %<%H:%M> %?"
               :if-new (file+head+olp "%<%Y-%m-%d>.org" ,head ("Journal")))
              ("t" "do today" item
               "[ ] %i%?"
               :if-new (file+head+olp "%<%Y-%m-%d>.org" ,head ("TODO Do Today"))
               :immediate-finish nil)
              ("m" "maybe do today" item
               "[ ] %a"
               :if-new (file+head+olp "%<%Y-%m-%d>.org" ,head ("Maybe Do Today"))
               :immediate-finish t))))
#+end_src

#+RESULTS:
| j | journal | entry | * %<%H:%M> %? | :if-new | (file+head+olp %<%Y-%m-%d>.org #+title: %<%Y-%m-%d (%A)> |

Hello
? I would like this to work, but honestly don't know if it will work all to well for me, lets see I guess
#+begin_src emacs-lisp
;; Set up org-agenda-files to include Org Roam dailies directory
(setq org-agenda-files (append org-agenda-files (list "~/org/roam/daily")))

#+end_src

#+RESULTS:
| ~/org/roam/daily/ | ~/org/roam/daily |

*** Defining Some Custom Commands
#+begin_src emacs-lisp
; preface, I stole this straight from the internet, so I dunno even if this will work, and only have a loose Idea as to how it should work
(defun as/org-roam-today-mk-agenda-link ()
  (interactive)
  (let* ((marker (or (org-get-at-bol 'org-marker)
                     (org-agenda-error)))
         (buffer (marker-buffer marker))
         (pos (marker-position marker)))
    (with-current-buffer buffer
      (save-excursion
        (goto-char pos)
        (org-roam-dailies-capture-today)))))

(defun as/get-daily-agenda (&optional date)
  "Return the agenda for the day as a string."
  (interactive)
  (let ((file (make-temp-file "daily-agenda" nil ".txt")))
    (org-agenda nil "d" nil)
    (when date (org-agenda-goto-date date))
    (org-agenda-write file nil nil "*Org Agenda(d)*")
    (kill-buffer)
    (with-temp-buffer
      (insert-file-contents file)
      (goto-char (point-min))
      (kill-line 2)
      (while (re-search-forward "^  " nil t)
        (replace-match "- " nil nil))
      (buffer-string))))
#+end_src

#+RESULTS:
: as/get-daily-agenda

*** Tell Org-Agenda About The Custom Commands
#+begin_src emacs-lisp
;; Customize the default Org agenda command to include Org Roam daily files
(setq org-agenda-custom-commands
      '(("d" "Org Roam Daily Files"
         ((agenda "" ((org-agenda-files (list "~/org/roam/daily"))))
          (function as/org-roam-today-mk-agenda-link)
          (function as/get-daily-agenda)))))
#+end_src

#+RESULTS:
| d | Org Roam Daily Files | ((agenda  ((org-agenda-files (list ~/org/roam/daily)))) #'as/org-roam-today-mk-agenda-link #'as/get-daily-agenda) |

* Language Stuff
doom emacs is super nice in having a lot of easy configuration found in the [[doomdir: init.el][init.el]] file, but for anything that doesn't come with doom, I likely have to add it to the [[doomdir:packages.el][packages.el]] file, and handle it here
either that, or just specify options for stuff that needs it
** Flycheck
#+begin_src emacs-lisp
(use-package! flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
(ispell-change-dictionary "en_US" t)
#+end_src
** LSP Stuff in particular
*** File Templates:
#+begin_src emacs-lisp
(set-file-template! "\\.pro" :trigger "__" :mode 'prolog-mode)
#+end_src

#+RESULTS:
| \.pro                 | :trigger      | __                                  | :mode         | prolog-mode       |          |                 |
| haskell-mode          | :trigger      | haskell-auto-insert-module-template | :project      | t                 |          |                 |
| gitignore-mode        |               |                                     |               |                   |          |                 |
| dockerfile-mode       |               |                                     |               |                   |          |                 |
| /docker-compose\.yml$ | :mode         | yaml-mode                           |               |                   |          |                 |
| /Makefile$            | :mode         | makefile-gmake-mode                 |               |                   |          |                 |
| /\.dir-locals\.el$    |               |                                     |               |                   |          |                 |
| /\.doomrc$            | :trigger      | __doomrc                            | :mode         | emacs-lisp-mode   |          |                 |
| /packages\.el$        | :when         | +file-templates-in-emacs-dirs-p     | :trigger      | __doom-packages   | :mode    | emacs-lisp-mode |
| /doctor\.el$          | :when         | +file-templates-in-emacs-dirs-p     | :trigger      | __doom-doctor     | :mode    | emacs-lisp-mode |
| /test/.+\.el$         | :when         | +file-templates-in-emacs-dirs-p     | :trigger      | __doom-test       | :mode    | emacs-lisp-mode |
| \.el$                 | :when         | +file-templates-in-emacs-dirs-p     | :trigger      | __doom-module     | :mode    | emacs-lisp-mode |
| -test\.el$            | :mode         | emacs-ert-mode                      |               |                   |          |                 |
| emacs-lisp-mode       | :trigger      | __package                           |               |                   |          |                 |
| snippet-mode          |               |                                     |               |                   |          |                 |
| /main\.c\(?:c\        | pp\)$         | :trigger                            | __main.cpp    | :mode             | c++-mode |                 |
| /win32_\.c\(?:c\      | pp\)$         | :trigger                            | __winmain.cpp | :mode             | c++-mode |                 |
| \.c\(?:c\             | pp\)$         | :trigger                            | __cpp         | :mode             | c++-mode |                 |
| \.h\(?:h\             | pp\           | xx\)$                               | :trigger      | __hpp             | :mode    | c++-mode        |
| \.h$                  | :trigger      | __h                                 | :mode         | c-mode            |          |                 |
| c-mode                | :trigger      | __c                                 |               |                   |          |                 |
| /\.envrc$             | :trigger      | __envrc                             | :mode         | direnv-envrc-mode |          |                 |
| /main\.go$            | :trigger      | __main.go                           | :mode         | go-mode           | :project | t               |
| go-mode               | :trigger      | __.go                               |               |                   |          |                 |
| /normalize\.scss$     | :trigger      | __normalize.scss                    | :mode         | scss-mode         |          |                 |
| /master\.scss$        | :trigger      | __master.scss                       | :mode         | scss-mode         |          |                 |
| \.html$               | :trigger      | __.html                             | :mode         | web-mode          |          |                 |
| scss-mode             |               |                                     |               |                   |          |                 |
| /main\.java$          | :trigger      | __main                              | :mode         | java-mode         |          |                 |
| /build\.gradle$       | :trigger      | __build.gradle                      | :mode         | android-mode      |          |                 |
| /src/.+\.java$        | :mode         | java-mode                           |               |                   |          |                 |
| /package\.json$       | :trigger      | __package.json                      | :mode         | json-mode         |          |                 |
| /bower\.json$         | :trigger      | __bower.json                        | :mode         | json-mode         |          |                 |
| /gulpfile\.js$        | :trigger      | __gulpfile.js                       | :mode         | js-mode           |          |                 |
| /webpack\.config\.js$ | :trigger      | __webpack.config.js                 | :mode         | js-mode           |          |                 |
| /main\.lua$           | :trigger      | __main.lua                          | :mode         | love-mode         |          |                 |
| /conf\.lua$           | :trigger      | __conf.lua                          | :mode         | love-mode         |          |                 |
| markdown-mode         |               |                                     |               |                   |          |                 |
| nxml-mode             |               |                                     |               |                   |          |                 |
| /shell\.nix$          | :trigger      | __shell.nix                         |               |                   |          |                 |
| nix-mode              |               |                                     |               |                   |          |                 |
| doom-docs-org-mode    | :trigger      | +file-templates-insert-doom-docs-fn | :mode         | org-mode          |          |                 |
| org-journal-mode      | :ignore       | t                                   |               |                   |          |                 |
| org-mode              |               |                                     |               |                   |          |                 |
| \.class\.php$         | :trigger      | __.class.php                        | :mode         | php-mode          |          |                 |
| php-mode              |               |                                     |               |                   |          |                 |
| python-mode           |               |                                     |               |                   |          |                 |
| /lib/.+\.rb$          | :trigger      | __module                            | :mode         | ruby-mode         | :project | t               |
| /spec_helper\.rb$     | :trigger      | __helper                            | :mode         | rspec-mode        | :project | t               |
| _spec\.rb$            | :mode         | rspec-mode                          | :project      | t                 |          |                 |
| /\.rspec$             | :trigger      | __.rspec                            | :mode         | rspec-mode        | :project | t               |
| \.gemspec$            | :trigger      | __.gemspec                          | :mode         | ruby-mode         | :project | t               |
| /Gemfile$             | :trigger      | __Gemfile                           | :mode         | ruby-mode         | :project | t               |
| /Rakefile$            | :trigger      | __Rakefile                          | :mode         | ruby-mode         | :project | t               |
| ruby-mode             |               |                                     |               |                   |          |                 |
| /Cargo\.toml$         | :trigger      | __Cargo.toml                        | :mode         | rust-mode         |          |                 |
| /main\.rs$            | :trigger      | __main.rs                           | :mode         | rust-mode         |          |                 |
| /\(?:index\           | main\)\.slim$ | :mode                               | slim-mode     |                   |          |                 |
| \.zunit$              | :trigger      | __zunit                             | :mode         | sh-mode           |          |                 |
| fish-mode             |               |                                     |               |                   |          |                 |
| sh-mode               |               |                                     |               |                   |          |                 |
| solidity-mode         | :trigger      | __sol                               |               |                   |          |                 |

*** Prolog
I've been using prolog for some classes, and am honestly enjoying using the language, it's growing on me for sure. What's nice is that Prolog is largely a GNU project, and so it's already included in base emacs with a prolog-mode. Just needs some configuring, and an lsp backend to make things real nice
#+begin_src emacs-lisp
(when(executable-find "swipl")
  (after! lsp-mode
    (lsp-register-client
     (make-lsp-client
      :new-connection
      (lsp-stdio-connection (list "swipl"
                                  "-g" "use_module(library(lsp_server))."
                                  "-g" "lsp_server:main"
                                  "-t" "halt"
                                  "--" "stdio"))
      :major-modes '(prolog-mode)
      :priority 1
      :multi-root t
      :server-id 'prolog-ls))
    )
  )
(when (not (executable-find "swipl"))
  (warn! "Swipl not found in the system, prolog might not work as expected"))
#+end_src

#+RESULTS:

**** Hooks and such
#+begin_src emacs-lisp
(add-hook 'find-file-hook #'my-prolog-mode-setup)

(defun my-prolog-mode-setup ()
  "Custom setup for .pro files."
  (when (and (stringp buffer-file-name)
             (string= (file-name-extension buffer-file-name) "pro"))
    (prolog-mode)
    (lsp)))
#+end_src

#+RESULTS:
: my-prolog-mode-setup

** TODO Lexic
#+begin_src emacs-lisp
(use-package! lexic
  :commands lexic-search lexic-list-dictionary
  :config
  (map! :map lexic-mode-map
        :n "q" #'lexic-return-from-lexic
        :nv "RET" #'lexic-search-word-at-point
        :n "a" #'outline-show-all
        :n "h" (cmd! (outline-hide-sublevels 3))
        :n "o" #'lexic-toggle-entry
        :n "n" #'lexic-next-entry
        :n "N" (cmd! (lexic-next-entry t))
        :n "p" #'lexic-previous-entry
        :n "P" (cmd! (lexic-previous-entry t))
        :n "E" (cmd! (lexic-return-from-lexic) ; expand
                     (switch-to-buffer (lexic-get-buffer)))
        :n "M" (cmd! (lexic-return-from-lexic) ; minimise
                     (lexic-goto-lexic))
        :n "C-p" #'lexic-search-history-backwards
        :n "C-n" #'lexic-search-history-forwards
        :n "/" (cmd! (call-interactively #'lexic-search))))
#+end_src

#+RESULTS:

lsfdkjsdflksajdlkjafsd
#+begin_src emacs-lisp
(defadvice! +lookup/dictionary-definition-lexic (identifier &optional arg)
  "Look up the definition of the word at point (or selection) using `lexic-search'."
  :override #'+lookup/dictionary-definition
  (interactive
   (list (or (doom-thing-at-point-or-region 'word)
             (read-string "Look up in dictionary: "))
         current-prefix-arg))
  (lexic-search identifier nil nil t))
#+end_src

#+RESULTS:
#+begin_src shell
DIC_FOLDER=${STARDICT_DATA_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/stardict}/dic
if [ ! -d "$DIC_FOLDER" ]; then
    TMP="$(mktemp -d /tmp/dict-XXX)"
    cd "$TMP"
    curl -A "Mozilla/4.0" -o "stardict.tar.gz" "https://tecosaur.com/resources/config/stardict.tar.gz"
    tar -xf "stardict.tar.gz"
    rm "stardict.tar.gz"
    mkdir -p "$DIC_FOLDER"
    mv * "$DIC_FOLDER"
fi
#+end_src

#+RESULTS:
** Spell-Checking
*** Abbrev
gangster swagger
#+begin_src emacs-lisp
(setq-default abbrev-mode t)

(defvar abbrev-fn (expand-file-name "misc/abbrev.el" doom-user-dir))
(setq abbrev-file-name abbrev-fn)
#+end_src

*** Jinx
#+begin_src emacs-lisp
(use-package! jinx
        :defer t
        :init
        (add-hook 'doom-init-ui-hook #'global-jinx-mode)
        :config
        ;; Use my custom dictionary
        (setq jinx-languages "en-custom")
        ;; Extra face(s) to ignore
        (push 'org-inline-src-block
        (alist-get 'org-mode jinx-exclude-faces))
        ;; Take over the relevant bindings.
        (after! ispell
        (global-set-key [remap ispell-word] #'jinx-correct))
        (after! evil-commands
        (global-set-key [remap evil-next-flyspell-error] #'jinx-next)
        (global-set-key [remap evil-prev-flyspell-error] #'jinx-previous))
        ;; I prefer for `point' to end up at the start of the word,
        ;; not just after the end.
        (advice-add 'jinx-next :after (lambda (_) (left-word))))
#+end_src

#+RESULTS:

** LaTeX
#+begin_src emacs-lisp
(after! cdlatex
  (setq cdlatex-env-alist
        '(("bmatrix" "\\begin{bmatrix}\n?\n\\end{bmatrix}" nil)
          ("equation*" "\\begin{equation*}\n?\n\\end{equation*}" nil)))
  (setq ;; cdlatex-math-symbol-prefix ?\; ;; doesn't work at the moment :(
   cdlatex-math-symbol-alist
   '( ;; adding missing functions to 3rd level symbols
     (?_    ("\\downarrow"  ""           "\\inf"))
     (?2    ("^2"           "\\sqrt{?}"     ""     ))
     (?3    ("^3"           "\\sqrt[3]{?}"  ""     ))
     (?^    ("\\uparrow"    ""           "\\sup"))
     (?k    ("\\kappa"      ""           "\\ker"))
     (?m    ("\\mu"         ""           "\\lim"))
     (?c    (""             "\\circ"     "\\cos"))
     (?d    ("\\delta"      "\\partial"  "\\dim"))
     (?D    ("\\Delta"      "\\nabla"    "\\deg"))
     ;; no idea why \Phi isnt on 'F' in first place, \phi is on 'f'.
     (?F    ("\\Phi"))
     ;; now just convenience
     (?.    ("\\cdot" "\\dots"))
     (?:    ("\\vdots" "\\ddots"))
     (?*    ("\\times" "\\star" "\\ast")))
   cdlatex-math-modify-alist
   '( ;; my own stuff
     (?B    "\\mathbb"        nil          t    nil  nil)
     (?a    "\\abs"           nil          t    nil  nil))))
#+end_src
#+RESULTS:
| 66 | \mathbb | nil | t | nil | nil |
| 97 | \abs    | nil | t | nil | nil |
** GraphViz
#+begin_src emacs-lisp
(use-package! graphviz-dot-mode
  :commands graphviz-dot-mode
  :mode '("\\.dot\\'" . graphviz-dot-mode)
  :init
  (after! org
    (setcdr (assoc "dot" org-src-lang-modes)
            'graphviz-dot)))

(use-package! company-graphviz-dot
  :after graphviz-dot-mode)
#+end_src

#+RESULTS:

** Snippets
I use yasnippets like a good sheeple
#+begin_src emacs-lisp
(setq yas-triggers-in-field t)
#+end_src
auto expanding snippets
#+begin_src emacs-lisp
(use-package! aas
  :commands aas-mode)
#+end_src


#+RESULTS:
: aas-mode




* Unsorted Config (temporary)
Unsorted config as I fix my fuckups
#+begin_src emacs-lisp
;;"A variable-pitch face with serifs."
;;:group 'basic-faces)
;;
;;(defcustom variable-pitch-serif-font (font-spec :family "serif")
;;"The font face used for `variable-pitch-serif'."
;;:group 'basic-faces
;;:set (lambda (symbol value)
;;(set-face-attribute 'variable-pitch-serif nil :font value)
;;(set-default-toplevel-value symbol value)))
;;(setq org-pretty-mode t)








;;(after!
;;:and (org flycheck)
;;(defconst flycheck-org-lint-form
;;  (flycheck-prepare-emacs-lisp-form
;;    (require 'org)
;;    (require 'org-lint)
;;    (require 'org-attach)
;;    (let ((source (car command-line-args-left))
;;          (process-default-directory default-directory))
;;      (with-temp-buffer
;;        (insert-file-contents source 'visit)
;;        (setq buffer-file-name source)
;;        (setq default-directory process-default-directory)
;;        (delay-mode-hooks (org-mode))
;;        (setq delayed-mode-hooks nil)
;;        (dolist (err (org-lint))
;;          (let ((inf (cl-second err)))
;;            (princ (elt inf 0))
;;            (princ ": ")
;;            (princ (elt inf 2))
;;            (terpri)))))))
;;
;;(defconst flycheck-org-lint-variables
;;  '(org-directory
;;    org-id-locations
;;    org-id-locations-file
;;    org-attach-id-dir
;;    org-attach-use-inheritance
;;    org-attach-id-to-path-function-list
;;    org-link-parameters)
;;  "Variables inherited by the org-lint subprocess.")
;;
;;(defun flycheck-org-lint-variables-form ()
;;  (require 'org-attach)  ; Needed to make variables available
;;  `(progn
;;     ,@(seq-map (lambda (opt) `(setq-default ,opt ',(symbol-value opt)))
;;                (seq-filter #'boundp flycheck-org-lint-variables))))
;;
;;(eval ; To preveant eager macro expansion form loading flycheck early.
;; '(flycheck-define-checker org-lint
;;   "Org buffer checker using `org-lint'."
;;   :command ("emacs" (eval flycheck-emacs-args)
;;             "--eval" (eval (concat "(add-to-list 'load-path \""
;;                                    (file-name-directory (locate-library "org"))
;;                                    "\")"))
;;             "--eval" (eval (flycheck-sexp-to-string
;;                             (flycheck-org-lint-variables-form)))
;;             "--eval" (eval (flycheck-sexp-to-string
;;                             (flycheck-org-lint-customisations-form)))
;;             "--eval" (eval flycheck-org-lint-form)
;;             "--" source)
;;   :error-patterns
;;   ((error line-start line ": " (message) line-end))
;;   :modes org-mode))
;;
;;(add-to-list 'flycheck-checkers 'org-lint)
;;
;;(defun flycheck-org-lint-customisations-form ()
;;  `(progn
;;     (require 'ox)
;;     (cl-pushnew '(:latex-cover-page nil "coverpage" nil)
;;                 (org-export-backend-options (org-export-get-backend 'latex)))
;;     (cl-pushnew '(:latex-font-set nil "fontset" nil)
;;                 (org-export-backend-options (org-export-get-backend 'latex))))))


#+end_src
#+begin_src emacs-lisp





#+end_src
